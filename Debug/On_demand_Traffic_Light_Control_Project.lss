
On_demand_Traffic_Light_Control_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000cce  00000d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  00000d66  2**0
                  ALLOC
  3 .stab         000018c0  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013f1  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <main>
  8a:	0c 94 65 06 	jmp	0xcca	; 0xcca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER1_Init>:
#include "Timer1.h"



void TIMER1_Init(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
//	#if (TIMER_OPERATION_MODE == TIMER1_MODE_INTERVAL)
		TIMER1_TCCR1A_REG|= TIMER1_INTERVAL_MODE_WGM10 | TIMER1_INTERVAL_MODE_WGM11;
  9a:	af e4       	ldi	r26, 0x4F	; 79
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ef e4       	ldi	r30, 0x4F	; 79
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8c 93       	st	X, r24
		TIMER1_TCCR1B_REG|= TIMER1_INTERVAL_MODE_WGM12 | TIMER1_INTERVAL_MODE_WGM13;
  a6:	ae e4       	ldi	r26, 0x4E	; 78
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	ee e4       	ldi	r30, 0x4E	; 78
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8c 93       	st	X, r24
//	#else
//	#error "You Shall Define Timer Operation Mode In Timer1_Cfg.h"
//	#endif
}
  b2:	cf 91       	pop	r28
  b4:	df 91       	pop	r29
  b6:	08 95       	ret

000000b8 <TIMER1_Start>:

void TIMER1_Start(u8 prescaler)
{
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	0f 92       	push	r0
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_TCCR1B_REG|=prescaler;
  c4:	ae e4       	ldi	r26, 0x4E	; 78
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	ee e4       	ldi	r30, 0x4E	; 78
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	89 2b       	or	r24, r25
  d2:	8c 93       	st	X, r24
}
  d4:	0f 90       	pop	r0
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <TIMER1_Stop>:
void TIMER1_Stop(void)
{
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
	TIMER1_TCCR1B_REG &=~(0x07);
  e4:	ae e4       	ldi	r26, 0x4E	; 78
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ee e4       	ldi	r30, 0x4E	; 78
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	88 7f       	andi	r24, 0xF8	; 248
  f0:	8c 93       	st	X, r24
}
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

000000f8 <TIMER1_SetPreload>:
void TIMER1_SetPreload(u16 preLoadValue)
{
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	00 d0       	rcall	.+0      	; 0xfe <TIMER1_SetPreload+0x6>
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_TCNT1_REG = preLoadValue;
 106:	ec e4       	ldi	r30, 0x4C	; 76
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	91 83       	std	Z+1, r25	; 0x01
 110:	80 83       	st	Z, r24
}
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	cf 91       	pop	r28
 118:	df 91       	pop	r29
 11a:	08 95       	ret

0000011c <TIMER1_EnableInterrupt>:
void TIMER1_EnableInterrupt(void)
{
 11c:	df 93       	push	r29
 11e:	cf 93       	push	r28
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER1_OPERATION_MODE == TIMER1_MODE_INTERVAL)
	SET_BIT(TIMER1_TIMSK_REG,TIMER1_INTERVAL_INT_ENABLE_BIT_NO);
 124:	a9 e5       	ldi	r26, 0x59	; 89
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	e9 e5       	ldi	r30, 0x59	; 89
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	8c 93       	st	X, r24
	#endif
}
 132:	cf 91       	pop	r28
 134:	df 91       	pop	r29
 136:	08 95       	ret

00000138 <TIMER1_DisableInterrupt>:
void TIMER1_DisableInterrupt(void)
{
 138:	df 93       	push	r29
 13a:	cf 93       	push	r28
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER1_OPERATION_MODE == TIMER1_MODE_INTERVAL)
	CLEAR_BIT(TIMER1_TIMSK_REG,TIMER1_INTERVAL_INT_ENABLE_BIT_NO);
 140:	a9 e5       	ldi	r26, 0x59	; 89
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e9 e5       	ldi	r30, 0x59	; 89
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8b 7f       	andi	r24, 0xFB	; 251
 14c:	8c 93       	st	X, r24
	#endif
}
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	08 95       	ret

00000154 <EnableAllInterrupts>:
 *      Author: Eng_Fawzi
 */

#include "GlblInterrupt_Interface.h"
glbIntErrorState EnableAllInterrupts()
{
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(AVR_SREG_REG,I_BIT);
 15c:	af e5       	ldi	r26, 0x5F	; 95
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	ef e5       	ldi	r30, 0x5F	; 95
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 68       	ori	r24, 0x80	; 128
 168:	8c 93       	st	X, r24

	return GLB_INT_SUCCESS;
 16a:	81 e0       	ldi	r24, 0x01	; 1
}
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	08 95       	ret

00000172 <DisableAllInterrupts>:
glbIntErrorState DisableAllInterrupts()
{
 172:	df 93       	push	r29
 174:	cf 93       	push	r28
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(AVR_SREG_REG,I_BIT);
 17a:	af e5       	ldi	r26, 0x5F	; 95
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	ef e5       	ldi	r30, 0x5F	; 95
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	8f 77       	andi	r24, 0x7F	; 127
 186:	8c 93       	st	X, r24

	return GLB_INT_SUCCESS;
 188:	81 e0       	ldi	r24, 0x01	; 1
}
 18a:	cf 91       	pop	r28
 18c:	df 91       	pop	r29
 18e:	08 95       	ret

00000190 <ExtInt_Enable>:
 ********************************/

#include "ExtInt_Interface.h"

void ExtInt_Enable(Int_ID extIntID)
{
 190:	df 93       	push	r29
 192:	cf 93       	push	r28
 194:	0f 92       	push	r0
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(EXTINT_GICR_REG,EXT_INT0_EN_BIT);
 19c:	ab e5       	ldi	r26, 0x5B	; 91
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	eb e5       	ldi	r30, 0x5B	; 91
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 64       	ori	r24, 0x40	; 64
 1a8:	8c 93       	st	X, r24
}
 1aa:	0f 90       	pop	r0
 1ac:	cf 91       	pop	r28
 1ae:	df 91       	pop	r29
 1b0:	08 95       	ret

000001b2 <ExtInt_Disable>:
void ExtInt_Disable(Int_ID extIntID)
{
 1b2:	df 93       	push	r29
 1b4:	cf 93       	push	r28
 1b6:	0f 92       	push	r0
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(EXTINT_GICR_REG,EXT_INT0_EN_BIT);
 1be:	ab e5       	ldi	r26, 0x5B	; 91
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	eb e5       	ldi	r30, 0x5B	; 91
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	8f 7b       	andi	r24, 0xBF	; 191
 1ca:	8c 93       	st	X, r24
}
 1cc:	0f 90       	pop	r0
 1ce:	cf 91       	pop	r28
 1d0:	df 91       	pop	r29
 1d2:	08 95       	ret

000001d4 <ExtInt_SnsCtrlSet>:
void ExtInt_SnsCtrlSet(Int_ID extIntID,Sense_Mode_ID intSense)
{
 1d4:	df 93       	push	r29
 1d6:	cf 93       	push	r28
 1d8:	00 d0       	rcall	.+0      	; 0x1da <ExtInt_SnsCtrlSet+0x6>
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	89 83       	std	Y+1, r24	; 0x01
 1e0:	6a 83       	std	Y+2, r22	; 0x02

		EXTINT_MCUCR_REG|=intSense<<EXT_INT0_SENSE_BIT;
 1e2:	a5 e5       	ldi	r26, 0x55	; 85
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e5 e5       	ldi	r30, 0x55	; 85
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	90 81       	ld	r25, Z
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	89 2b       	or	r24, r25
 1f0:	8c 93       	st	X, r24
}
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	cf 91       	pop	r28
 1f8:	df 91       	pop	r29
 1fa:	08 95       	ret

000001fc <Dio_ConfigChannel>:
 */

#include "Dio_Interface.h"

dioErrorState Dio_ConfigChannel(Dio_Port port,Dio_Channel channel, Dio_Direction direction)
{
 1fc:	df 93       	push	r29
 1fe:	cf 93       	push	r28
 200:	00 d0       	rcall	.+0      	; 0x202 <Dio_ConfigChannel+0x6>
 202:	00 d0       	rcall	.+0      	; 0x204 <Dio_ConfigChannel+0x8>
 204:	00 d0       	rcall	.+0      	; 0x206 <Dio_ConfigChannel+0xa>
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	8a 83       	std	Y+2, r24	; 0x02
 20c:	6b 83       	std	Y+3, r22	; 0x03
 20e:	4c 83       	std	Y+4, r20	; 0x04
	dioErrorState retResult = DIO_FAIL;
 210:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	3e 83       	std	Y+6, r19	; 0x06
 21a:	2d 83       	std	Y+5, r18	; 0x05
 21c:	8d 81       	ldd	r24, Y+5	; 0x05
 21e:	9e 81       	ldd	r25, Y+6	; 0x06
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	91 05       	cpc	r25, r1
 224:	09 f4       	brne	.+2      	; 0x228 <Dio_ConfigChannel+0x2c>
 226:	45 c0       	rjmp	.+138    	; 0x2b2 <Dio_ConfigChannel+0xb6>
 228:	2d 81       	ldd	r18, Y+5	; 0x05
 22a:	3e 81       	ldd	r19, Y+6	; 0x06
 22c:	22 30       	cpi	r18, 0x02	; 2
 22e:	31 05       	cpc	r19, r1
 230:	2c f4       	brge	.+10     	; 0x23c <Dio_ConfigChannel+0x40>
 232:	8d 81       	ldd	r24, Y+5	; 0x05
 234:	9e 81       	ldd	r25, Y+6	; 0x06
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	71 f0       	breq	.+28     	; 0x256 <Dio_ConfigChannel+0x5a>
 23a:	c4 c0       	rjmp	.+392    	; 0x3c4 <Dio_ConfigChannel+0x1c8>
 23c:	2d 81       	ldd	r18, Y+5	; 0x05
 23e:	3e 81       	ldd	r19, Y+6	; 0x06
 240:	22 30       	cpi	r18, 0x02	; 2
 242:	31 05       	cpc	r19, r1
 244:	09 f4       	brne	.+2      	; 0x248 <Dio_ConfigChannel+0x4c>
 246:	63 c0       	rjmp	.+198    	; 0x30e <Dio_ConfigChannel+0x112>
 248:	8d 81       	ldd	r24, Y+5	; 0x05
 24a:	9e 81       	ldd	r25, Y+6	; 0x06
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	91 05       	cpc	r25, r1
 250:	09 f4       	brne	.+2      	; 0x254 <Dio_ConfigChannel+0x58>
 252:	8b c0       	rjmp	.+278    	; 0x36a <Dio_ConfigChannel+0x16e>
 254:	b7 c0       	rjmp	.+366    	; 0x3c4 <Dio_ConfigChannel+0x1c8>
	{
	case DIO_PORTA:
		if (direction == INPUT)
 256:	8c 81       	ldd	r24, Y+4	; 0x04
 258:	88 23       	and	r24, r24
 25a:	a9 f4       	brne	.+42     	; 0x286 <Dio_ConfigChannel+0x8a>
		{
			CLEAR_BIT(DIO_DDRA_REG,channel);
 25c:	aa e3       	ldi	r26, 0x3A	; 58
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	ea e3       	ldi	r30, 0x3A	; 58
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	48 2f       	mov	r20, r24
 268:	8b 81       	ldd	r24, Y+3	; 0x03
 26a:	28 2f       	mov	r18, r24
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 2e       	mov	r0, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <Dio_ConfigChannel+0x7e>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	0a 94       	dec	r0
 27c:	e2 f7       	brpl	.-8      	; 0x276 <Dio_ConfigChannel+0x7a>
 27e:	80 95       	com	r24
 280:	84 23       	and	r24, r20
 282:	8c 93       	st	X, r24
 284:	13 c0       	rjmp	.+38     	; 0x2ac <Dio_ConfigChannel+0xb0>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,channel);
 286:	aa e3       	ldi	r26, 0x3A	; 58
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	ea e3       	ldi	r30, 0x3A	; 58
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	48 2f       	mov	r20, r24
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 2e       	mov	r0, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <Dio_ConfigChannel+0xa8>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	0a 94       	dec	r0
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <Dio_ConfigChannel+0xa4>
 2a8:	84 2b       	or	r24, r20
 2aa:	8c 93       	st	X, r24
		}
		retResult = DIO_SUCCESS;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	89 c0       	rjmp	.+274    	; 0x3c4 <Dio_ConfigChannel+0x1c8>
		break;
	case DIO_PORTB:
		if (direction == INPUT)
 2b2:	8c 81       	ldd	r24, Y+4	; 0x04
 2b4:	88 23       	and	r24, r24
 2b6:	a9 f4       	brne	.+42     	; 0x2e2 <Dio_ConfigChannel+0xe6>
		{
			CLEAR_BIT(DIO_DDRB_REG,channel);
 2b8:	a7 e3       	ldi	r26, 0x37	; 55
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	e7 e3       	ldi	r30, 0x37	; 55
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	48 2f       	mov	r20, r24
 2c4:	8b 81       	ldd	r24, Y+3	; 0x03
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 2e       	mov	r0, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <Dio_ConfigChannel+0xda>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <Dio_ConfigChannel+0xd6>
 2da:	80 95       	com	r24
 2dc:	84 23       	and	r24, r20
 2de:	8c 93       	st	X, r24
 2e0:	13 c0       	rjmp	.+38     	; 0x308 <Dio_ConfigChannel+0x10c>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,channel);
 2e2:	a7 e3       	ldi	r26, 0x37	; 55
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	e7 e3       	ldi	r30, 0x37	; 55
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	48 2f       	mov	r20, r24
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <Dio_ConfigChannel+0x104>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <Dio_ConfigChannel+0x100>
 304:	84 2b       	or	r24, r20
 306:	8c 93       	st	X, r24
		}
		retResult = DIO_SUCCESS;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	89 83       	std	Y+1, r24	; 0x01
 30c:	5b c0       	rjmp	.+182    	; 0x3c4 <Dio_ConfigChannel+0x1c8>
		break;
	case DIO_PORTC:
		if (direction == INPUT)
 30e:	8c 81       	ldd	r24, Y+4	; 0x04
 310:	88 23       	and	r24, r24
 312:	a9 f4       	brne	.+42     	; 0x33e <Dio_ConfigChannel+0x142>
		{
			CLEAR_BIT(DIO_DDRC_REG,channel);
 314:	a4 e3       	ldi	r26, 0x34	; 52
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	e4 e3       	ldi	r30, 0x34	; 52
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	48 2f       	mov	r20, r24
 320:	8b 81       	ldd	r24, Y+3	; 0x03
 322:	28 2f       	mov	r18, r24
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 2e       	mov	r0, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <Dio_ConfigChannel+0x136>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <Dio_ConfigChannel+0x132>
 336:	80 95       	com	r24
 338:	84 23       	and	r24, r20
 33a:	8c 93       	st	X, r24
 33c:	13 c0       	rjmp	.+38     	; 0x364 <Dio_ConfigChannel+0x168>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,channel);
 33e:	a4 e3       	ldi	r26, 0x34	; 52
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	e4 e3       	ldi	r30, 0x34	; 52
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	48 2f       	mov	r20, r24
 34a:	8b 81       	ldd	r24, Y+3	; 0x03
 34c:	28 2f       	mov	r18, r24
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 2e       	mov	r0, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <Dio_ConfigChannel+0x160>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	0a 94       	dec	r0
 35e:	e2 f7       	brpl	.-8      	; 0x358 <Dio_ConfigChannel+0x15c>
 360:	84 2b       	or	r24, r20
 362:	8c 93       	st	X, r24
		}
		retResult = DIO_SUCCESS;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	89 83       	std	Y+1, r24	; 0x01
 368:	2d c0       	rjmp	.+90     	; 0x3c4 <Dio_ConfigChannel+0x1c8>
		break;
	case DIO_PORTD:
		if (direction == INPUT)
 36a:	8c 81       	ldd	r24, Y+4	; 0x04
 36c:	88 23       	and	r24, r24
 36e:	a9 f4       	brne	.+42     	; 0x39a <Dio_ConfigChannel+0x19e>
		{
			CLEAR_BIT(DIO_DDRD_REG,channel);
 370:	a1 e3       	ldi	r26, 0x31	; 49
 372:	b0 e0       	ldi	r27, 0x00	; 0
 374:	e1 e3       	ldi	r30, 0x31	; 49
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	48 2f       	mov	r20, r24
 37c:	8b 81       	ldd	r24, Y+3	; 0x03
 37e:	28 2f       	mov	r18, r24
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 2e       	mov	r0, r18
 388:	02 c0       	rjmp	.+4      	; 0x38e <Dio_ConfigChannel+0x192>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	0a 94       	dec	r0
 390:	e2 f7       	brpl	.-8      	; 0x38a <Dio_ConfigChannel+0x18e>
 392:	80 95       	com	r24
 394:	84 23       	and	r24, r20
 396:	8c 93       	st	X, r24
 398:	13 c0       	rjmp	.+38     	; 0x3c0 <Dio_ConfigChannel+0x1c4>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,channel);
 39a:	a1 e3       	ldi	r26, 0x31	; 49
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	e1 e3       	ldi	r30, 0x31	; 49
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	48 2f       	mov	r20, r24
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 2e       	mov	r0, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <Dio_ConfigChannel+0x1bc>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <Dio_ConfigChannel+0x1b8>
 3bc:	84 2b       	or	r24, r20
 3be:	8c 93       	st	X, r24
		}
		retResult = DIO_SUCCESS;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return retResult;
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
}
 3c6:	26 96       	adiw	r28, 0x06	; 6
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
 3d2:	cf 91       	pop	r28
 3d4:	df 91       	pop	r29
 3d6:	08 95       	ret

000003d8 <Dio_WriteChannel>:
dioErrorState Dio_WriteChannel(Dio_Port port,Dio_Channel channel, Dio_Level level)
{
 3d8:	df 93       	push	r29
 3da:	cf 93       	push	r28
 3dc:	00 d0       	rcall	.+0      	; 0x3de <Dio_WriteChannel+0x6>
 3de:	00 d0       	rcall	.+0      	; 0x3e0 <Dio_WriteChannel+0x8>
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <Dio_WriteChannel+0xa>
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	8a 83       	std	Y+2, r24	; 0x02
 3e8:	6b 83       	std	Y+3, r22	; 0x03
 3ea:	4c 83       	std	Y+4, r20	; 0x04
	dioErrorState retResult = DIO_FAIL;
 3ec:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
 3ee:	8a 81       	ldd	r24, Y+2	; 0x02
 3f0:	28 2f       	mov	r18, r24
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	3e 83       	std	Y+6, r19	; 0x06
 3f6:	2d 83       	std	Y+5, r18	; 0x05
 3f8:	8d 81       	ldd	r24, Y+5	; 0x05
 3fa:	9e 81       	ldd	r25, Y+6	; 0x06
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	91 05       	cpc	r25, r1
 400:	09 f4       	brne	.+2      	; 0x404 <Dio_WriteChannel+0x2c>
 402:	45 c0       	rjmp	.+138    	; 0x48e <Dio_WriteChannel+0xb6>
 404:	2d 81       	ldd	r18, Y+5	; 0x05
 406:	3e 81       	ldd	r19, Y+6	; 0x06
 408:	22 30       	cpi	r18, 0x02	; 2
 40a:	31 05       	cpc	r19, r1
 40c:	2c f4       	brge	.+10     	; 0x418 <Dio_WriteChannel+0x40>
 40e:	8d 81       	ldd	r24, Y+5	; 0x05
 410:	9e 81       	ldd	r25, Y+6	; 0x06
 412:	00 97       	sbiw	r24, 0x00	; 0
 414:	71 f0       	breq	.+28     	; 0x432 <Dio_WriteChannel+0x5a>
 416:	c4 c0       	rjmp	.+392    	; 0x5a0 <Dio_WriteChannel+0x1c8>
 418:	2d 81       	ldd	r18, Y+5	; 0x05
 41a:	3e 81       	ldd	r19, Y+6	; 0x06
 41c:	22 30       	cpi	r18, 0x02	; 2
 41e:	31 05       	cpc	r19, r1
 420:	09 f4       	brne	.+2      	; 0x424 <Dio_WriteChannel+0x4c>
 422:	63 c0       	rjmp	.+198    	; 0x4ea <Dio_WriteChannel+0x112>
 424:	8d 81       	ldd	r24, Y+5	; 0x05
 426:	9e 81       	ldd	r25, Y+6	; 0x06
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	91 05       	cpc	r25, r1
 42c:	09 f4       	brne	.+2      	; 0x430 <Dio_WriteChannel+0x58>
 42e:	8b c0       	rjmp	.+278    	; 0x546 <Dio_WriteChannel+0x16e>
 430:	b7 c0       	rjmp	.+366    	; 0x5a0 <Dio_WriteChannel+0x1c8>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 432:	8c 81       	ldd	r24, Y+4	; 0x04
 434:	88 23       	and	r24, r24
 436:	a9 f4       	brne	.+42     	; 0x462 <Dio_WriteChannel+0x8a>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 438:	ab e3       	ldi	r26, 0x3B	; 59
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	eb e3       	ldi	r30, 0x3B	; 59
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	48 2f       	mov	r20, r24
 444:	8b 81       	ldd	r24, Y+3	; 0x03
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 2e       	mov	r0, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <Dio_WriteChannel+0x7e>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <Dio_WriteChannel+0x7a>
 45a:	80 95       	com	r24
 45c:	84 23       	and	r24, r20
 45e:	8c 93       	st	X, r24
 460:	13 c0       	rjmp	.+38     	; 0x488 <Dio_WriteChannel+0xb0>
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 462:	ab e3       	ldi	r26, 0x3B	; 59
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	eb e3       	ldi	r30, 0x3B	; 59
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	48 2f       	mov	r20, r24
 46e:	8b 81       	ldd	r24, Y+3	; 0x03
 470:	28 2f       	mov	r18, r24
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 2e       	mov	r0, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <Dio_WriteChannel+0xa8>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	0a 94       	dec	r0
 482:	e2 f7       	brpl	.-8      	; 0x47c <Dio_WriteChannel+0xa4>
 484:	84 2b       	or	r24, r20
 486:	8c 93       	st	X, r24
		}
		retResult = DIO_SUCCESS;
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	89 83       	std	Y+1, r24	; 0x01
 48c:	89 c0       	rjmp	.+274    	; 0x5a0 <Dio_WriteChannel+0x1c8>
		break;
	case DIO_PORTB:
		if (level == STD_LOW)
 48e:	8c 81       	ldd	r24, Y+4	; 0x04
 490:	88 23       	and	r24, r24
 492:	a9 f4       	brne	.+42     	; 0x4be <Dio_WriteChannel+0xe6>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 494:	a8 e3       	ldi	r26, 0x38	; 56
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e8 e3       	ldi	r30, 0x38	; 56
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 2e       	mov	r0, r18
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <Dio_WriteChannel+0xda>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <Dio_WriteChannel+0xd6>
 4b6:	80 95       	com	r24
 4b8:	84 23       	and	r24, r20
 4ba:	8c 93       	st	X, r24
 4bc:	13 c0       	rjmp	.+38     	; 0x4e4 <Dio_WriteChannel+0x10c>
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 4be:	a8 e3       	ldi	r26, 0x38	; 56
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e8 e3       	ldi	r30, 0x38	; 56
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	48 2f       	mov	r20, r24
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 2e       	mov	r0, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <Dio_WriteChannel+0x104>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <Dio_WriteChannel+0x100>
 4e0:	84 2b       	or	r24, r20
 4e2:	8c 93       	st	X, r24
		}
		retResult = DIO_SUCCESS;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	89 83       	std	Y+1, r24	; 0x01
 4e8:	5b c0       	rjmp	.+182    	; 0x5a0 <Dio_WriteChannel+0x1c8>
		break;
	case DIO_PORTC:
		if (level == STD_LOW)
 4ea:	8c 81       	ldd	r24, Y+4	; 0x04
 4ec:	88 23       	and	r24, r24
 4ee:	a9 f4       	brne	.+42     	; 0x51a <Dio_WriteChannel+0x142>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 4f0:	a5 e3       	ldi	r26, 0x35	; 53
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	e5 e3       	ldi	r30, 0x35	; 53
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	48 2f       	mov	r20, r24
 4fc:	8b 81       	ldd	r24, Y+3	; 0x03
 4fe:	28 2f       	mov	r18, r24
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 2e       	mov	r0, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <Dio_WriteChannel+0x136>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	0a 94       	dec	r0
 510:	e2 f7       	brpl	.-8      	; 0x50a <Dio_WriteChannel+0x132>
 512:	80 95       	com	r24
 514:	84 23       	and	r24, r20
 516:	8c 93       	st	X, r24
 518:	13 c0       	rjmp	.+38     	; 0x540 <Dio_WriteChannel+0x168>
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 51a:	a5 e3       	ldi	r26, 0x35	; 53
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	e5 e3       	ldi	r30, 0x35	; 53
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	48 2f       	mov	r20, r24
 526:	8b 81       	ldd	r24, Y+3	; 0x03
 528:	28 2f       	mov	r18, r24
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 2e       	mov	r0, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <Dio_WriteChannel+0x160>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	0a 94       	dec	r0
 53a:	e2 f7       	brpl	.-8      	; 0x534 <Dio_WriteChannel+0x15c>
 53c:	84 2b       	or	r24, r20
 53e:	8c 93       	st	X, r24
		}
		retResult = DIO_SUCCESS;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	89 83       	std	Y+1, r24	; 0x01
 544:	2d c0       	rjmp	.+90     	; 0x5a0 <Dio_WriteChannel+0x1c8>
		break;
	case DIO_PORTD:
		if (level == STD_LOW)
 546:	8c 81       	ldd	r24, Y+4	; 0x04
 548:	88 23       	and	r24, r24
 54a:	a9 f4       	brne	.+42     	; 0x576 <Dio_WriteChannel+0x19e>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 54c:	a2 e3       	ldi	r26, 0x32	; 50
 54e:	b0 e0       	ldi	r27, 0x00	; 0
 550:	e2 e3       	ldi	r30, 0x32	; 50
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	48 2f       	mov	r20, r24
 558:	8b 81       	ldd	r24, Y+3	; 0x03
 55a:	28 2f       	mov	r18, r24
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 2e       	mov	r0, r18
 564:	02 c0       	rjmp	.+4      	; 0x56a <Dio_WriteChannel+0x192>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	0a 94       	dec	r0
 56c:	e2 f7       	brpl	.-8      	; 0x566 <Dio_WriteChannel+0x18e>
 56e:	80 95       	com	r24
 570:	84 23       	and	r24, r20
 572:	8c 93       	st	X, r24
 574:	13 c0       	rjmp	.+38     	; 0x59c <Dio_WriteChannel+0x1c4>
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 576:	a2 e3       	ldi	r26, 0x32	; 50
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	e2 e3       	ldi	r30, 0x32	; 50
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	48 2f       	mov	r20, r24
 582:	8b 81       	ldd	r24, Y+3	; 0x03
 584:	28 2f       	mov	r18, r24
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 2e       	mov	r0, r18
 58e:	02 c0       	rjmp	.+4      	; 0x594 <Dio_WriteChannel+0x1bc>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	0a 94       	dec	r0
 596:	e2 f7       	brpl	.-8      	; 0x590 <Dio_WriteChannel+0x1b8>
 598:	84 2b       	or	r24, r20
 59a:	8c 93       	st	X, r24
		}
		retResult = DIO_SUCCESS;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return retResult;
 5a0:	89 81       	ldd	r24, Y+1	; 0x01
}
 5a2:	26 96       	adiw	r28, 0x06	; 6
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
 5ae:	cf 91       	pop	r28
 5b0:	df 91       	pop	r29
 5b2:	08 95       	ret

000005b4 <Dio_ReadChannel>:
Dio_Level Dio_ReadChannel(Dio_Port port,Dio_Channel channel)
{
 5b4:	df 93       	push	r29
 5b6:	cf 93       	push	r28
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <Dio_ReadChannel+0x6>
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <Dio_ReadChannel+0x8>
 5bc:	0f 92       	push	r0
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	8a 83       	std	Y+2, r24	; 0x02
 5c4:	6b 83       	std	Y+3, r22	; 0x03
	Dio_Level ret_level;
	switch (port)
 5c6:	8a 81       	ldd	r24, Y+2	; 0x02
 5c8:	28 2f       	mov	r18, r24
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	3d 83       	std	Y+5, r19	; 0x05
 5ce:	2c 83       	std	Y+4, r18	; 0x04
 5d0:	4c 81       	ldd	r20, Y+4	; 0x04
 5d2:	5d 81       	ldd	r21, Y+5	; 0x05
 5d4:	41 30       	cpi	r20, 0x01	; 1
 5d6:	51 05       	cpc	r21, r1
 5d8:	41 f1       	breq	.+80     	; 0x62a <Dio_ReadChannel+0x76>
 5da:	8c 81       	ldd	r24, Y+4	; 0x04
 5dc:	9d 81       	ldd	r25, Y+5	; 0x05
 5de:	82 30       	cpi	r24, 0x02	; 2
 5e0:	91 05       	cpc	r25, r1
 5e2:	34 f4       	brge	.+12     	; 0x5f0 <Dio_ReadChannel+0x3c>
 5e4:	2c 81       	ldd	r18, Y+4	; 0x04
 5e6:	3d 81       	ldd	r19, Y+5	; 0x05
 5e8:	21 15       	cp	r18, r1
 5ea:	31 05       	cpc	r19, r1
 5ec:	61 f0       	breq	.+24     	; 0x606 <Dio_ReadChannel+0x52>
 5ee:	52 c0       	rjmp	.+164    	; 0x694 <Dio_ReadChannel+0xe0>
 5f0:	4c 81       	ldd	r20, Y+4	; 0x04
 5f2:	5d 81       	ldd	r21, Y+5	; 0x05
 5f4:	42 30       	cpi	r20, 0x02	; 2
 5f6:	51 05       	cpc	r21, r1
 5f8:	51 f1       	breq	.+84     	; 0x64e <Dio_ReadChannel+0x9a>
 5fa:	8c 81       	ldd	r24, Y+4	; 0x04
 5fc:	9d 81       	ldd	r25, Y+5	; 0x05
 5fe:	83 30       	cpi	r24, 0x03	; 3
 600:	91 05       	cpc	r25, r1
 602:	b9 f1       	breq	.+110    	; 0x672 <Dio_ReadChannel+0xbe>
 604:	47 c0       	rjmp	.+142    	; 0x694 <Dio_ReadChannel+0xe0>
	{
	case DIO_PORTA:
		ret_level = CHECK_BIT(DIO_PINA_REG,channel);
 606:	e9 e3       	ldi	r30, 0x39	; 57
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	28 2f       	mov	r18, r24
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	8b 81       	ldd	r24, Y+3	; 0x03
 612:	88 2f       	mov	r24, r24
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	a9 01       	movw	r20, r18
 618:	02 c0       	rjmp	.+4      	; 0x61e <Dio_ReadChannel+0x6a>
 61a:	55 95       	asr	r21
 61c:	47 95       	ror	r20
 61e:	8a 95       	dec	r24
 620:	e2 f7       	brpl	.-8      	; 0x61a <Dio_ReadChannel+0x66>
 622:	ca 01       	movw	r24, r20
 624:	81 70       	andi	r24, 0x01	; 1
 626:	89 83       	std	Y+1, r24	; 0x01
 628:	35 c0       	rjmp	.+106    	; 0x694 <Dio_ReadChannel+0xe0>
		break;
	case DIO_PORTB:
		ret_level = CHECK_BIT(DIO_PINB_REG,channel);
 62a:	e6 e3       	ldi	r30, 0x36	; 54
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	28 2f       	mov	r18, r24
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	8b 81       	ldd	r24, Y+3	; 0x03
 636:	88 2f       	mov	r24, r24
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	a9 01       	movw	r20, r18
 63c:	02 c0       	rjmp	.+4      	; 0x642 <Dio_ReadChannel+0x8e>
 63e:	55 95       	asr	r21
 640:	47 95       	ror	r20
 642:	8a 95       	dec	r24
 644:	e2 f7       	brpl	.-8      	; 0x63e <Dio_ReadChannel+0x8a>
 646:	ca 01       	movw	r24, r20
 648:	81 70       	andi	r24, 0x01	; 1
 64a:	89 83       	std	Y+1, r24	; 0x01
 64c:	23 c0       	rjmp	.+70     	; 0x694 <Dio_ReadChannel+0xe0>
		break;
	case DIO_PORTC:
		ret_level = CHECK_BIT(DIO_PINC_REG,channel);
 64e:	e3 e3       	ldi	r30, 0x33	; 51
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	28 2f       	mov	r18, r24
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	8b 81       	ldd	r24, Y+3	; 0x03
 65a:	88 2f       	mov	r24, r24
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	a9 01       	movw	r20, r18
 660:	02 c0       	rjmp	.+4      	; 0x666 <Dio_ReadChannel+0xb2>
 662:	55 95       	asr	r21
 664:	47 95       	ror	r20
 666:	8a 95       	dec	r24
 668:	e2 f7       	brpl	.-8      	; 0x662 <Dio_ReadChannel+0xae>
 66a:	ca 01       	movw	r24, r20
 66c:	81 70       	andi	r24, 0x01	; 1
 66e:	89 83       	std	Y+1, r24	; 0x01
 670:	11 c0       	rjmp	.+34     	; 0x694 <Dio_ReadChannel+0xe0>
		break;
	case DIO_PORTD:
		ret_level = CHECK_BIT(DIO_PIND_REG,channel);
 672:	e0 e3       	ldi	r30, 0x30	; 48
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	28 2f       	mov	r18, r24
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	8b 81       	ldd	r24, Y+3	; 0x03
 67e:	88 2f       	mov	r24, r24
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	a9 01       	movw	r20, r18
 684:	02 c0       	rjmp	.+4      	; 0x68a <Dio_ReadChannel+0xd6>
 686:	55 95       	asr	r21
 688:	47 95       	ror	r20
 68a:	8a 95       	dec	r24
 68c:	e2 f7       	brpl	.-8      	; 0x686 <Dio_ReadChannel+0xd2>
 68e:	ca 01       	movw	r24, r20
 690:	81 70       	andi	r24, 0x01	; 1
 692:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ret_level;
 694:	89 81       	ldd	r24, Y+1	; 0x01
}
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	0f 90       	pop	r0
 69c:	0f 90       	pop	r0
 69e:	0f 90       	pop	r0
 6a0:	cf 91       	pop	r28
 6a2:	df 91       	pop	r29
 6a4:	08 95       	ret

000006a6 <Dio_FlipChannel>:

dioErrorState Dio_FlipChannel(Dio_Port port,Dio_Channel channel)
{
 6a6:	df 93       	push	r29
 6a8:	cf 93       	push	r28
 6aa:	00 d0       	rcall	.+0      	; 0x6ac <Dio_FlipChannel+0x6>
 6ac:	00 d0       	rcall	.+0      	; 0x6ae <Dio_FlipChannel+0x8>
 6ae:	0f 92       	push	r0
 6b0:	cd b7       	in	r28, 0x3d	; 61
 6b2:	de b7       	in	r29, 0x3e	; 62
 6b4:	8a 83       	std	Y+2, r24	; 0x02
 6b6:	6b 83       	std	Y+3, r22	; 0x03
	dioErrorState retResult = DIO_FAIL;
 6b8:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
 6ba:	8a 81       	ldd	r24, Y+2	; 0x02
 6bc:	28 2f       	mov	r18, r24
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	3d 83       	std	Y+5, r19	; 0x05
 6c2:	2c 83       	std	Y+4, r18	; 0x04
 6c4:	8c 81       	ldd	r24, Y+4	; 0x04
 6c6:	9d 81       	ldd	r25, Y+5	; 0x05
 6c8:	81 30       	cpi	r24, 0x01	; 1
 6ca:	91 05       	cpc	r25, r1
 6cc:	61 f1       	breq	.+88     	; 0x726 <Dio_FlipChannel+0x80>
 6ce:	2c 81       	ldd	r18, Y+4	; 0x04
 6d0:	3d 81       	ldd	r19, Y+5	; 0x05
 6d2:	22 30       	cpi	r18, 0x02	; 2
 6d4:	31 05       	cpc	r19, r1
 6d6:	2c f4       	brge	.+10     	; 0x6e2 <Dio_FlipChannel+0x3c>
 6d8:	8c 81       	ldd	r24, Y+4	; 0x04
 6da:	9d 81       	ldd	r25, Y+5	; 0x05
 6dc:	00 97       	sbiw	r24, 0x00	; 0
 6de:	69 f0       	breq	.+26     	; 0x6fa <Dio_FlipChannel+0x54>
 6e0:	63 c0       	rjmp	.+198    	; 0x7a8 <Dio_FlipChannel+0x102>
 6e2:	2c 81       	ldd	r18, Y+4	; 0x04
 6e4:	3d 81       	ldd	r19, Y+5	; 0x05
 6e6:	22 30       	cpi	r18, 0x02	; 2
 6e8:	31 05       	cpc	r19, r1
 6ea:	99 f1       	breq	.+102    	; 0x752 <Dio_FlipChannel+0xac>
 6ec:	8c 81       	ldd	r24, Y+4	; 0x04
 6ee:	9d 81       	ldd	r25, Y+5	; 0x05
 6f0:	83 30       	cpi	r24, 0x03	; 3
 6f2:	91 05       	cpc	r25, r1
 6f4:	09 f4       	brne	.+2      	; 0x6f8 <Dio_FlipChannel+0x52>
 6f6:	43 c0       	rjmp	.+134    	; 0x77e <Dio_FlipChannel+0xd8>
 6f8:	57 c0       	rjmp	.+174    	; 0x7a8 <Dio_FlipChannel+0x102>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,channel);
 6fa:	ab e3       	ldi	r26, 0x3B	; 59
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	eb e3       	ldi	r30, 0x3B	; 59
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	48 2f       	mov	r20, r24
 706:	8b 81       	ldd	r24, Y+3	; 0x03
 708:	28 2f       	mov	r18, r24
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	02 2e       	mov	r0, r18
 712:	02 c0       	rjmp	.+4      	; 0x718 <Dio_FlipChannel+0x72>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	0a 94       	dec	r0
 71a:	e2 f7       	brpl	.-8      	; 0x714 <Dio_FlipChannel+0x6e>
 71c:	84 27       	eor	r24, r20
 71e:	8c 93       	st	X, r24
		retResult = DIO_SUCCESS;
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	89 83       	std	Y+1, r24	; 0x01
 724:	41 c0       	rjmp	.+130    	; 0x7a8 <Dio_FlipChannel+0x102>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,channel);
 726:	a8 e3       	ldi	r26, 0x38	; 56
 728:	b0 e0       	ldi	r27, 0x00	; 0
 72a:	e8 e3       	ldi	r30, 0x38	; 56
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 81       	ld	r24, Z
 730:	48 2f       	mov	r20, r24
 732:	8b 81       	ldd	r24, Y+3	; 0x03
 734:	28 2f       	mov	r18, r24
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 2e       	mov	r0, r18
 73e:	02 c0       	rjmp	.+4      	; 0x744 <Dio_FlipChannel+0x9e>
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	0a 94       	dec	r0
 746:	e2 f7       	brpl	.-8      	; 0x740 <Dio_FlipChannel+0x9a>
 748:	84 27       	eor	r24, r20
 74a:	8c 93       	st	X, r24
		retResult = DIO_SUCCESS;
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	89 83       	std	Y+1, r24	; 0x01
 750:	2b c0       	rjmp	.+86     	; 0x7a8 <Dio_FlipChannel+0x102>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,channel);
 752:	a5 e3       	ldi	r26, 0x35	; 53
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	e5 e3       	ldi	r30, 0x35	; 53
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	48 2f       	mov	r20, r24
 75e:	8b 81       	ldd	r24, Y+3	; 0x03
 760:	28 2f       	mov	r18, r24
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	02 2e       	mov	r0, r18
 76a:	02 c0       	rjmp	.+4      	; 0x770 <Dio_FlipChannel+0xca>
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	0a 94       	dec	r0
 772:	e2 f7       	brpl	.-8      	; 0x76c <Dio_FlipChannel+0xc6>
 774:	84 27       	eor	r24, r20
 776:	8c 93       	st	X, r24
		retResult = DIO_SUCCESS;
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	89 83       	std	Y+1, r24	; 0x01
 77c:	15 c0       	rjmp	.+42     	; 0x7a8 <Dio_FlipChannel+0x102>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,channel);
 77e:	a2 e3       	ldi	r26, 0x32	; 50
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	e2 e3       	ldi	r30, 0x32	; 50
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	80 81       	ld	r24, Z
 788:	48 2f       	mov	r20, r24
 78a:	8b 81       	ldd	r24, Y+3	; 0x03
 78c:	28 2f       	mov	r18, r24
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	02 2e       	mov	r0, r18
 796:	02 c0       	rjmp	.+4      	; 0x79c <Dio_FlipChannel+0xf6>
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	0a 94       	dec	r0
 79e:	e2 f7       	brpl	.-8      	; 0x798 <Dio_FlipChannel+0xf2>
 7a0:	84 27       	eor	r24, r20
 7a2:	8c 93       	st	X, r24
		retResult = DIO_SUCCESS;
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return retResult;
 7a8:	89 81       	ldd	r24, Y+1	; 0x01
}
 7aa:	0f 90       	pop	r0
 7ac:	0f 90       	pop	r0
 7ae:	0f 90       	pop	r0
 7b0:	0f 90       	pop	r0
 7b2:	0f 90       	pop	r0
 7b4:	cf 91       	pop	r28
 7b6:	df 91       	pop	r29
 7b8:	08 95       	ret

000007ba <Led_Init>:
 **********************************/

#include "Led_Interface.h"

void Led_Init(void)
{
 7ba:	df 93       	push	r29
 7bc:	cf 93       	push	r28
 7be:	cd b7       	in	r28, 0x3d	; 61
 7c0:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(CAR_PORT, CAR_GREEN_CHANNEL, OUTPUT);
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	41 e0       	ldi	r20, 0x01	; 1
 7c8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Dio_ConfigChannel>
	Dio_ConfigChannel(CAR_PORT, CAR_YELLOW_CHANNEL, OUTPUT);
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	61 e0       	ldi	r22, 0x01	; 1
 7d0:	41 e0       	ldi	r20, 0x01	; 1
 7d2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Dio_ConfigChannel>
	Dio_ConfigChannel(CAR_PORT, CAR_RED_CHANNEL, OUTPUT);
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	62 e0       	ldi	r22, 0x02	; 2
 7da:	41 e0       	ldi	r20, 0x01	; 1
 7dc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Dio_ConfigChannel>

	Dio_ConfigChannel(PEDESTRIANS_PORT, PEDESTRIANS_GREEN_CHANNEL, OUTPUT);
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	41 e0       	ldi	r20, 0x01	; 1
 7e6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Dio_ConfigChannel>
	Dio_ConfigChannel(PEDESTRIANS_PORT, PEDESTRIANS_YELLOW_CHANNEL, OUTPUT);
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	61 e0       	ldi	r22, 0x01	; 1
 7ee:	41 e0       	ldi	r20, 0x01	; 1
 7f0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Dio_ConfigChannel>
	Dio_ConfigChannel(PEDESTRIANS_PORT, PEDESTRIANS_RED_CHANNEL, OUTPUT);
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	62 e0       	ldi	r22, 0x02	; 2
 7f8:	41 e0       	ldi	r20, 0x01	; 1
 7fa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Dio_ConfigChannel>
}
 7fe:	cf 91       	pop	r28
 800:	df 91       	pop	r29
 802:	08 95       	ret

00000804 <Led_ON>:
void Led_ON(Led_ID led)
{
 804:	df 93       	push	r29
 806:	cf 93       	push	r28
 808:	00 d0       	rcall	.+0      	; 0x80a <Led_ON+0x6>
 80a:	0f 92       	push	r0
 80c:	cd b7       	in	r28, 0x3d	; 61
 80e:	de b7       	in	r29, 0x3e	; 62
 810:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
 812:	89 81       	ldd	r24, Y+1	; 0x01
 814:	28 2f       	mov	r18, r24
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	3b 83       	std	Y+3, r19	; 0x03
 81a:	2a 83       	std	Y+2, r18	; 0x02
 81c:	8a 81       	ldd	r24, Y+2	; 0x02
 81e:	9b 81       	ldd	r25, Y+3	; 0x03
 820:	82 30       	cpi	r24, 0x02	; 2
 822:	91 05       	cpc	r25, r1
 824:	59 f1       	breq	.+86     	; 0x87c <__stack+0x1d>
 826:	2a 81       	ldd	r18, Y+2	; 0x02
 828:	3b 81       	ldd	r19, Y+3	; 0x03
 82a:	23 30       	cpi	r18, 0x03	; 3
 82c:	31 05       	cpc	r19, r1
 82e:	54 f4       	brge	.+20     	; 0x844 <Led_ON+0x40>
 830:	8a 81       	ldd	r24, Y+2	; 0x02
 832:	9b 81       	ldd	r25, Y+3	; 0x03
 834:	00 97       	sbiw	r24, 0x00	; 0
 836:	b1 f0       	breq	.+44     	; 0x864 <__stack+0x5>
 838:	2a 81       	ldd	r18, Y+2	; 0x02
 83a:	3b 81       	ldd	r19, Y+3	; 0x03
 83c:	21 30       	cpi	r18, 0x01	; 1
 83e:	31 05       	cpc	r19, r1
 840:	b9 f0       	breq	.+46     	; 0x870 <__stack+0x11>
 842:	33 c0       	rjmp	.+102    	; 0x8aa <__stack+0x4b>
 844:	8a 81       	ldd	r24, Y+2	; 0x02
 846:	9b 81       	ldd	r25, Y+3	; 0x03
 848:	84 30       	cpi	r24, 0x04	; 4
 84a:	91 05       	cpc	r25, r1
 84c:	19 f1       	breq	.+70     	; 0x894 <__stack+0x35>
 84e:	2a 81       	ldd	r18, Y+2	; 0x02
 850:	3b 81       	ldd	r19, Y+3	; 0x03
 852:	24 30       	cpi	r18, 0x04	; 4
 854:	31 05       	cpc	r19, r1
 856:	c4 f0       	brlt	.+48     	; 0x888 <__stack+0x29>
 858:	8a 81       	ldd	r24, Y+2	; 0x02
 85a:	9b 81       	ldd	r25, Y+3	; 0x03
 85c:	85 30       	cpi	r24, 0x05	; 5
 85e:	91 05       	cpc	r25, r1
 860:	f9 f0       	breq	.+62     	; 0x8a0 <__stack+0x41>
 862:	23 c0       	rjmp	.+70     	; 0x8aa <__stack+0x4b>
	{
	case CAR_GREEN_LED:
		Dio_WriteChannel(CAR_PORT,CAR_GREEN_CHANNEL,STD_HIGH);
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	41 e0       	ldi	r20, 0x01	; 1
 86a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Dio_WriteChannel>
 86e:	1d c0       	rjmp	.+58     	; 0x8aa <__stack+0x4b>
		break;
	case CAR_YELLOW_LED:
		Dio_WriteChannel(CAR_PORT,CAR_YELLOW_CHANNEL,STD_HIGH);
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	61 e0       	ldi	r22, 0x01	; 1
 874:	41 e0       	ldi	r20, 0x01	; 1
 876:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Dio_WriteChannel>
 87a:	17 c0       	rjmp	.+46     	; 0x8aa <__stack+0x4b>
		break;
	case CAR_RED_LED:
		Dio_WriteChannel(CAR_PORT,CAR_RED_CHANNEL,STD_HIGH);
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	62 e0       	ldi	r22, 0x02	; 2
 880:	41 e0       	ldi	r20, 0x01	; 1
 882:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Dio_WriteChannel>
 886:	11 c0       	rjmp	.+34     	; 0x8aa <__stack+0x4b>
		break;
	case PEDESTRIANS_GREEN_LED:
		Dio_WriteChannel(PEDESTRIANS_PORT,PEDESTRIANS_GREEN_CHANNEL,STD_HIGH);
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	41 e0       	ldi	r20, 0x01	; 1
 88e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Dio_WriteChannel>
 892:	0b c0       	rjmp	.+22     	; 0x8aa <__stack+0x4b>
		break;
	case PEDESTRIANS_YELLOW_LED:
		Dio_WriteChannel(PEDESTRIANS_PORT,PEDESTRIANS_YELLOW_CHANNEL,STD_HIGH);
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	61 e0       	ldi	r22, 0x01	; 1
 898:	41 e0       	ldi	r20, 0x01	; 1
 89a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Dio_WriteChannel>
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <__stack+0x4b>
		break;
	case PEDESTRIANS_RED_LED:
		Dio_WriteChannel(PEDESTRIANS_PORT,PEDESTRIANS_RED_CHANNEL,STD_HIGH);
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	62 e0       	ldi	r22, 0x02	; 2
 8a4:	41 e0       	ldi	r20, 0x01	; 1
 8a6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Dio_WriteChannel>
		break;
	}
}
 8aa:	0f 90       	pop	r0
 8ac:	0f 90       	pop	r0
 8ae:	0f 90       	pop	r0
 8b0:	cf 91       	pop	r28
 8b2:	df 91       	pop	r29
 8b4:	08 95       	ret

000008b6 <Led_OFF>:
void Led_OFF(Led_ID led)
{
 8b6:	df 93       	push	r29
 8b8:	cf 93       	push	r28
 8ba:	00 d0       	rcall	.+0      	; 0x8bc <Led_OFF+0x6>
 8bc:	0f 92       	push	r0
 8be:	cd b7       	in	r28, 0x3d	; 61
 8c0:	de b7       	in	r29, 0x3e	; 62
 8c2:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
 8c4:	89 81       	ldd	r24, Y+1	; 0x01
 8c6:	28 2f       	mov	r18, r24
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	3b 83       	std	Y+3, r19	; 0x03
 8cc:	2a 83       	std	Y+2, r18	; 0x02
 8ce:	8a 81       	ldd	r24, Y+2	; 0x02
 8d0:	9b 81       	ldd	r25, Y+3	; 0x03
 8d2:	82 30       	cpi	r24, 0x02	; 2
 8d4:	91 05       	cpc	r25, r1
 8d6:	59 f1       	breq	.+86     	; 0x92e <Led_OFF+0x78>
 8d8:	2a 81       	ldd	r18, Y+2	; 0x02
 8da:	3b 81       	ldd	r19, Y+3	; 0x03
 8dc:	23 30       	cpi	r18, 0x03	; 3
 8de:	31 05       	cpc	r19, r1
 8e0:	54 f4       	brge	.+20     	; 0x8f6 <Led_OFF+0x40>
 8e2:	8a 81       	ldd	r24, Y+2	; 0x02
 8e4:	9b 81       	ldd	r25, Y+3	; 0x03
 8e6:	00 97       	sbiw	r24, 0x00	; 0
 8e8:	b1 f0       	breq	.+44     	; 0x916 <Led_OFF+0x60>
 8ea:	2a 81       	ldd	r18, Y+2	; 0x02
 8ec:	3b 81       	ldd	r19, Y+3	; 0x03
 8ee:	21 30       	cpi	r18, 0x01	; 1
 8f0:	31 05       	cpc	r19, r1
 8f2:	b9 f0       	breq	.+46     	; 0x922 <Led_OFF+0x6c>
 8f4:	33 c0       	rjmp	.+102    	; 0x95c <Led_OFF+0xa6>
 8f6:	8a 81       	ldd	r24, Y+2	; 0x02
 8f8:	9b 81       	ldd	r25, Y+3	; 0x03
 8fa:	84 30       	cpi	r24, 0x04	; 4
 8fc:	91 05       	cpc	r25, r1
 8fe:	19 f1       	breq	.+70     	; 0x946 <Led_OFF+0x90>
 900:	2a 81       	ldd	r18, Y+2	; 0x02
 902:	3b 81       	ldd	r19, Y+3	; 0x03
 904:	24 30       	cpi	r18, 0x04	; 4
 906:	31 05       	cpc	r19, r1
 908:	c4 f0       	brlt	.+48     	; 0x93a <Led_OFF+0x84>
 90a:	8a 81       	ldd	r24, Y+2	; 0x02
 90c:	9b 81       	ldd	r25, Y+3	; 0x03
 90e:	85 30       	cpi	r24, 0x05	; 5
 910:	91 05       	cpc	r25, r1
 912:	f9 f0       	breq	.+62     	; 0x952 <Led_OFF+0x9c>
 914:	23 c0       	rjmp	.+70     	; 0x95c <Led_OFF+0xa6>
	{
	case CAR_GREEN_LED:
		Dio_WriteChannel(CAR_PORT,CAR_GREEN_CHANNEL,STD_LOW);
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	40 e0       	ldi	r20, 0x00	; 0
 91c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Dio_WriteChannel>
 920:	1d c0       	rjmp	.+58     	; 0x95c <Led_OFF+0xa6>
		break;
	case CAR_YELLOW_LED:
		Dio_WriteChannel(CAR_PORT,CAR_YELLOW_CHANNEL,STD_LOW);
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	61 e0       	ldi	r22, 0x01	; 1
 926:	40 e0       	ldi	r20, 0x00	; 0
 928:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Dio_WriteChannel>
 92c:	17 c0       	rjmp	.+46     	; 0x95c <Led_OFF+0xa6>
		break;
	case CAR_RED_LED:
		Dio_WriteChannel(CAR_PORT,CAR_RED_CHANNEL,STD_LOW);
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	62 e0       	ldi	r22, 0x02	; 2
 932:	40 e0       	ldi	r20, 0x00	; 0
 934:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Dio_WriteChannel>
 938:	11 c0       	rjmp	.+34     	; 0x95c <Led_OFF+0xa6>
		break;
	case PEDESTRIANS_GREEN_LED:
		Dio_WriteChannel(PEDESTRIANS_PORT,PEDESTRIANS_GREEN_CHANNEL,STD_LOW);
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	60 e0       	ldi	r22, 0x00	; 0
 93e:	40 e0       	ldi	r20, 0x00	; 0
 940:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Dio_WriteChannel>
 944:	0b c0       	rjmp	.+22     	; 0x95c <Led_OFF+0xa6>
		break;
	case PEDESTRIANS_YELLOW_LED:
		Dio_WriteChannel(PEDESTRIANS_PORT,PEDESTRIANS_YELLOW_CHANNEL,STD_LOW);
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	61 e0       	ldi	r22, 0x01	; 1
 94a:	40 e0       	ldi	r20, 0x00	; 0
 94c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Dio_WriteChannel>
 950:	05 c0       	rjmp	.+10     	; 0x95c <Led_OFF+0xa6>
		break;
	case PEDESTRIANS_RED_LED:
		Dio_WriteChannel(PEDESTRIANS_PORT,PEDESTRIANS_RED_CHANNEL,STD_LOW);
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	62 e0       	ldi	r22, 0x02	; 2
 956:	40 e0       	ldi	r20, 0x00	; 0
 958:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Dio_WriteChannel>
		break;
	}
}
 95c:	0f 90       	pop	r0
 95e:	0f 90       	pop	r0
 960:	0f 90       	pop	r0
 962:	cf 91       	pop	r28
 964:	df 91       	pop	r29
 966:	08 95       	ret

00000968 <Led_Toggle>:
void Led_Toggle(Led_ID led)
{
 968:	df 93       	push	r29
 96a:	cf 93       	push	r28
 96c:	00 d0       	rcall	.+0      	; 0x96e <Led_Toggle+0x6>
 96e:	0f 92       	push	r0
 970:	cd b7       	in	r28, 0x3d	; 61
 972:	de b7       	in	r29, 0x3e	; 62
 974:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
 976:	89 81       	ldd	r24, Y+1	; 0x01
 978:	28 2f       	mov	r18, r24
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	3b 83       	std	Y+3, r19	; 0x03
 97e:	2a 83       	std	Y+2, r18	; 0x02
 980:	8a 81       	ldd	r24, Y+2	; 0x02
 982:	9b 81       	ldd	r25, Y+3	; 0x03
 984:	82 30       	cpi	r24, 0x02	; 2
 986:	91 05       	cpc	r25, r1
 988:	49 f1       	breq	.+82     	; 0x9dc <Led_Toggle+0x74>
 98a:	2a 81       	ldd	r18, Y+2	; 0x02
 98c:	3b 81       	ldd	r19, Y+3	; 0x03
 98e:	23 30       	cpi	r18, 0x03	; 3
 990:	31 05       	cpc	r19, r1
 992:	54 f4       	brge	.+20     	; 0x9a8 <Led_Toggle+0x40>
 994:	8a 81       	ldd	r24, Y+2	; 0x02
 996:	9b 81       	ldd	r25, Y+3	; 0x03
 998:	00 97       	sbiw	r24, 0x00	; 0
 99a:	b1 f0       	breq	.+44     	; 0x9c8 <Led_Toggle+0x60>
 99c:	2a 81       	ldd	r18, Y+2	; 0x02
 99e:	3b 81       	ldd	r19, Y+3	; 0x03
 9a0:	21 30       	cpi	r18, 0x01	; 1
 9a2:	31 05       	cpc	r19, r1
 9a4:	b1 f0       	breq	.+44     	; 0x9d2 <Led_Toggle+0x6a>
 9a6:	2d c0       	rjmp	.+90     	; 0xa02 <Led_Toggle+0x9a>
 9a8:	8a 81       	ldd	r24, Y+2	; 0x02
 9aa:	9b 81       	ldd	r25, Y+3	; 0x03
 9ac:	84 30       	cpi	r24, 0x04	; 4
 9ae:	91 05       	cpc	r25, r1
 9b0:	f9 f0       	breq	.+62     	; 0x9f0 <Led_Toggle+0x88>
 9b2:	2a 81       	ldd	r18, Y+2	; 0x02
 9b4:	3b 81       	ldd	r19, Y+3	; 0x03
 9b6:	24 30       	cpi	r18, 0x04	; 4
 9b8:	31 05       	cpc	r19, r1
 9ba:	ac f0       	brlt	.+42     	; 0x9e6 <Led_Toggle+0x7e>
 9bc:	8a 81       	ldd	r24, Y+2	; 0x02
 9be:	9b 81       	ldd	r25, Y+3	; 0x03
 9c0:	85 30       	cpi	r24, 0x05	; 5
 9c2:	91 05       	cpc	r25, r1
 9c4:	d1 f0       	breq	.+52     	; 0x9fa <Led_Toggle+0x92>
 9c6:	1d c0       	rjmp	.+58     	; 0xa02 <Led_Toggle+0x9a>
	{
	case CAR_GREEN_LED:
		Dio_FlipChannel(CAR_PORT,CAR_GREEN_CHANNEL);
 9c8:	80 e0       	ldi	r24, 0x00	; 0
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Dio_FlipChannel>
 9d0:	18 c0       	rjmp	.+48     	; 0xa02 <Led_Toggle+0x9a>
		break;
	case CAR_YELLOW_LED:
		Dio_FlipChannel(CAR_PORT,CAR_YELLOW_CHANNEL);
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	61 e0       	ldi	r22, 0x01	; 1
 9d6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Dio_FlipChannel>
 9da:	13 c0       	rjmp	.+38     	; 0xa02 <Led_Toggle+0x9a>
		break;
	case CAR_RED_LED:
		Dio_FlipChannel(CAR_PORT,CAR_RED_CHANNEL);
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	62 e0       	ldi	r22, 0x02	; 2
 9e0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Dio_FlipChannel>
 9e4:	0e c0       	rjmp	.+28     	; 0xa02 <Led_Toggle+0x9a>
		break;
	case PEDESTRIANS_GREEN_LED:
		Dio_FlipChannel(PEDESTRIANS_PORT,PEDESTRIANS_GREEN_CHANNEL);
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	60 e0       	ldi	r22, 0x00	; 0
 9ea:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Dio_FlipChannel>
 9ee:	09 c0       	rjmp	.+18     	; 0xa02 <Led_Toggle+0x9a>
		break;
	case PEDESTRIANS_YELLOW_LED:
		Dio_FlipChannel(PEDESTRIANS_PORT,PEDESTRIANS_YELLOW_CHANNEL);
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	61 e0       	ldi	r22, 0x01	; 1
 9f4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Dio_FlipChannel>
 9f8:	04 c0       	rjmp	.+8      	; 0xa02 <Led_Toggle+0x9a>
		break;
	case PEDESTRIANS_RED_LED:
		Dio_FlipChannel(PEDESTRIANS_PORT,PEDESTRIANS_RED_CHANNEL);
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	62 e0       	ldi	r22, 0x02	; 2
 9fe:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Dio_FlipChannel>
		break;
	}
}
 a02:	0f 90       	pop	r0
 a04:	0f 90       	pop	r0
 a06:	0f 90       	pop	r0
 a08:	cf 91       	pop	r28
 a0a:	df 91       	pop	r29
 a0c:	08 95       	ret

00000a0e <__vector_9>:
volatile u8 count_Overflow_5s=1;



ISR(TIMER1_OVF_vect)
{
 a0e:	1f 92       	push	r1
 a10:	0f 92       	push	r0
 a12:	0f b6       	in	r0, 0x3f	; 63
 a14:	0f 92       	push	r0
 a16:	11 24       	eor	r1, r1
 a18:	2f 93       	push	r18
 a1a:	3f 93       	push	r19
 a1c:	4f 93       	push	r20
 a1e:	5f 93       	push	r21
 a20:	6f 93       	push	r22
 a22:	7f 93       	push	r23
 a24:	8f 93       	push	r24
 a26:	9f 93       	push	r25
 a28:	af 93       	push	r26
 a2a:	bf 93       	push	r27
 a2c:	ef 93       	push	r30
 a2e:	ff 93       	push	r31
 a30:	df 93       	push	r29
 a32:	cf 93       	push	r28
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
	Dio_FlipChannel(DIO_PORTC,DIO_CHANNEL0);
 a38:	82 e0       	ldi	r24, 0x02	; 2
 a3a:	60 e0       	ldi	r22, 0x00	; 0
 a3c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Dio_FlipChannel>
	if(Current_Mode==NORMAL_MODE)
 a40:	80 91 64 00 	lds	r24, 0x0064
 a44:	88 23       	and	r24, r24
 a46:	09 f0       	breq	.+2      	; 0xa4a <__vector_9+0x3c>
 a48:	53 c0       	rjmp	.+166    	; 0xaf0 <__vector_9+0xe2>
	{
		if(current_car_led_state==YELLOW)
 a4a:	80 91 65 00 	lds	r24, 0x0065
 a4e:	81 30       	cpi	r24, 0x01	; 1
 a50:	19 f4       	brne	.+6      	; 0xa58 <__vector_9+0x4a>
		{
			Led_Toggle(CAR_YELLOW_LED);
 a52:	81 e0       	ldi	r24, 0x01	; 1
 a54:	0e 94 b4 04 	call	0x968	; 0x968 <Led_Toggle>
		}

		if(count_Overflow_5s==NUMBER_OF_OVERFLOW_FOR_5S && current_car_led_state==GREEN && previous_car_led_state==YELLOW)
 a58:	80 91 63 00 	lds	r24, 0x0063
 a5c:	8a 30       	cpi	r24, 0x0A	; 10
 a5e:	81 f4       	brne	.+32     	; 0xa80 <__vector_9+0x72>
 a60:	80 91 65 00 	lds	r24, 0x0065
 a64:	88 23       	and	r24, r24
 a66:	61 f4       	brne	.+24     	; 0xa80 <__vector_9+0x72>
 a68:	80 91 60 00 	lds	r24, 0x0060
 a6c:	81 30       	cpi	r24, 0x01	; 1
 a6e:	41 f4       	brne	.+16     	; 0xa80 <__vector_9+0x72>
		{
			previous_car_led_state =GREEN;
 a70:	10 92 60 00 	sts	0x0060, r1
			current_car_led_state=YELLOW;
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	80 93 65 00 	sts	0x0065, r24
			count_Overflow_5s=0;
 a7a:	10 92 63 00 	sts	0x0063, r1
 a7e:	38 c0       	rjmp	.+112    	; 0xaf0 <__vector_9+0xe2>
		}
		else if(count_Overflow_5s==NUMBER_OF_OVERFLOW_FOR_5S && current_car_led_state==YELLOW && (previous_car_led_state==GREEN || previous_car_led_state==RED))
 a80:	80 91 63 00 	lds	r24, 0x0063
 a84:	8a 30       	cpi	r24, 0x0A	; 10
 a86:	01 f5       	brne	.+64     	; 0xac8 <__vector_9+0xba>
 a88:	80 91 65 00 	lds	r24, 0x0065
 a8c:	81 30       	cpi	r24, 0x01	; 1
 a8e:	e1 f4       	brne	.+56     	; 0xac8 <__vector_9+0xba>
 a90:	80 91 60 00 	lds	r24, 0x0060
 a94:	88 23       	and	r24, r24
 a96:	21 f0       	breq	.+8      	; 0xaa0 <__vector_9+0x92>
 a98:	80 91 60 00 	lds	r24, 0x0060
 a9c:	82 30       	cpi	r24, 0x02	; 2
 a9e:	a1 f4       	brne	.+40     	; 0xac8 <__vector_9+0xba>
		{
			if(previous_car_led_state==GREEN)
 aa0:	80 91 60 00 	lds	r24, 0x0060
 aa4:	88 23       	and	r24, r24
 aa6:	21 f4       	brne	.+8      	; 0xab0 <__vector_9+0xa2>
			{
				current_car_led_state=RED;
 aa8:	82 e0       	ldi	r24, 0x02	; 2
 aaa:	80 93 65 00 	sts	0x0065, r24
 aae:	06 c0       	rjmp	.+12     	; 0xabc <__vector_9+0xae>
			}
			else if(previous_car_led_state==RED)
 ab0:	80 91 60 00 	lds	r24, 0x0060
 ab4:	82 30       	cpi	r24, 0x02	; 2
 ab6:	11 f4       	brne	.+4      	; 0xabc <__vector_9+0xae>
			{
				current_car_led_state=GREEN;
 ab8:	10 92 65 00 	sts	0x0065, r1
			}
			previous_car_led_state =YELLOW;
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	80 93 60 00 	sts	0x0060, r24
			count_Overflow_5s=0;
 ac2:	10 92 63 00 	sts	0x0063, r1
 ac6:	14 c0       	rjmp	.+40     	; 0xaf0 <__vector_9+0xe2>
		}
		else if(count_Overflow_5s==NUMBER_OF_OVERFLOW_FOR_5S && current_car_led_state==RED && previous_car_led_state==YELLOW)
 ac8:	80 91 63 00 	lds	r24, 0x0063
 acc:	8a 30       	cpi	r24, 0x0A	; 10
 ace:	81 f4       	brne	.+32     	; 0xaf0 <__vector_9+0xe2>
 ad0:	80 91 65 00 	lds	r24, 0x0065
 ad4:	82 30       	cpi	r24, 0x02	; 2
 ad6:	61 f4       	brne	.+24     	; 0xaf0 <__vector_9+0xe2>
 ad8:	80 91 60 00 	lds	r24, 0x0060
 adc:	81 30       	cpi	r24, 0x01	; 1
 ade:	41 f4       	brne	.+16     	; 0xaf0 <__vector_9+0xe2>
		{
			previous_car_led_state=RED;
 ae0:	82 e0       	ldi	r24, 0x02	; 2
 ae2:	80 93 60 00 	sts	0x0060, r24
			current_car_led_state=YELLOW;
 ae6:	81 e0       	ldi	r24, 0x01	; 1
 ae8:	80 93 65 00 	sts	0x0065, r24
			count_Overflow_5s=0;
 aec:	10 92 63 00 	sts	0x0063, r1
		}
	}
	TIMER1_SetPreload(TIMER1_500ms_PRELOAD);
 af0:	8a e7       	ldi	r24, 0x7A	; 122
 af2:	91 ee       	ldi	r25, 0xE1	; 225
 af4:	0e 94 7c 00 	call	0xf8	; 0xf8 <TIMER1_SetPreload>
	count_Overflow_5s++;
 af8:	80 91 63 00 	lds	r24, 0x0063
 afc:	8f 5f       	subi	r24, 0xFF	; 255
 afe:	80 93 63 00 	sts	0x0063, r24
}
 b02:	cf 91       	pop	r28
 b04:	df 91       	pop	r29
 b06:	ff 91       	pop	r31
 b08:	ef 91       	pop	r30
 b0a:	bf 91       	pop	r27
 b0c:	af 91       	pop	r26
 b0e:	9f 91       	pop	r25
 b10:	8f 91       	pop	r24
 b12:	7f 91       	pop	r23
 b14:	6f 91       	pop	r22
 b16:	5f 91       	pop	r21
 b18:	4f 91       	pop	r20
 b1a:	3f 91       	pop	r19
 b1c:	2f 91       	pop	r18
 b1e:	0f 90       	pop	r0
 b20:	0f be       	out	0x3f, r0	; 63
 b22:	0f 90       	pop	r0
 b24:	1f 90       	pop	r1
 b26:	18 95       	reti

00000b28 <__vector_1>:

ISR(INT0_vect)
{
 b28:	1f 92       	push	r1
 b2a:	0f 92       	push	r0
 b2c:	0f b6       	in	r0, 0x3f	; 63
 b2e:	0f 92       	push	r0
 b30:	11 24       	eor	r1, r1
 b32:	2f 93       	push	r18
 b34:	3f 93       	push	r19
 b36:	4f 93       	push	r20
 b38:	5f 93       	push	r21
 b3a:	6f 93       	push	r22
 b3c:	7f 93       	push	r23
 b3e:	8f 93       	push	r24
 b40:	9f 93       	push	r25
 b42:	af 93       	push	r26
 b44:	bf 93       	push	r27
 b46:	ef 93       	push	r30
 b48:	ff 93       	push	r31
 b4a:	df 93       	push	r29
 b4c:	cf 93       	push	r28
 b4e:	cd b7       	in	r28, 0x3d	; 61
 b50:	de b7       	in	r29, 0x3e	; 62
	DisableAllInterrupts();
 b52:	0e 94 b9 00 	call	0x172	; 0x172 <DisableAllInterrupts>
	Current_Mode=PEDESTRIANS_MODE;
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	80 93 64 00 	sts	0x0064, r24
	EnableAllInterrupts();
 b5c:	0e 94 aa 00 	call	0x154	; 0x154 <EnableAllInterrupts>
}
 b60:	cf 91       	pop	r28
 b62:	df 91       	pop	r29
 b64:	ff 91       	pop	r31
 b66:	ef 91       	pop	r30
 b68:	bf 91       	pop	r27
 b6a:	af 91       	pop	r26
 b6c:	9f 91       	pop	r25
 b6e:	8f 91       	pop	r24
 b70:	7f 91       	pop	r23
 b72:	6f 91       	pop	r22
 b74:	5f 91       	pop	r21
 b76:	4f 91       	pop	r20
 b78:	3f 91       	pop	r19
 b7a:	2f 91       	pop	r18
 b7c:	0f 90       	pop	r0
 b7e:	0f be       	out	0x3f, r0	; 63
 b80:	0f 90       	pop	r0
 b82:	1f 90       	pop	r1
 b84:	18 95       	reti

00000b86 <Normal_Mode>:


void Normal_Mode(void)
{
 b86:	df 93       	push	r29
 b88:	cf 93       	push	r28
 b8a:	cd b7       	in	r28, 0x3d	; 61
 b8c:	de b7       	in	r29, 0x3e	; 62
 b8e:	39 c0       	rjmp	.+114    	; 0xc02 <Normal_Mode+0x7c>
	while(Current_Mode==NORMAL_MODE)
	{
		if(current_car_led_state==GREEN && Current_Mode==NORMAL_MODE)
 b90:	80 91 65 00 	lds	r24, 0x0065
 b94:	88 23       	and	r24, r24
 b96:	71 f4       	brne	.+28     	; 0xbb4 <Normal_Mode+0x2e>
 b98:	80 91 64 00 	lds	r24, 0x0064
 b9c:	88 23       	and	r24, r24
 b9e:	51 f4       	brne	.+20     	; 0xbb4 <Normal_Mode+0x2e>
		{
			TIMER1_Start(TIMER1_CS_1024_PRESCALER);
 ba0:	85 e0       	ldi	r24, 0x05	; 5
 ba2:	0e 94 5c 00 	call	0xb8	; 0xb8 <TIMER1_Start>
			Led_OFF(CAR_YELLOW_LED);
 ba6:	81 e0       	ldi	r24, 0x01	; 1
 ba8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Led_OFF>
			Led_ON(CAR_GREEN_LED);
 bac:	80 e0       	ldi	r24, 0x00	; 0
 bae:	0e 94 02 04 	call	0x804	; 0x804 <Led_ON>
 bb2:	27 c0       	rjmp	.+78     	; 0xc02 <Normal_Mode+0x7c>
		}
		else if(current_car_led_state==YELLOW && Current_Mode==NORMAL_MODE)
 bb4:	80 91 65 00 	lds	r24, 0x0065
 bb8:	81 30       	cpi	r24, 0x01	; 1
 bba:	59 f4       	brne	.+22     	; 0xbd2 <Normal_Mode+0x4c>
 bbc:	80 91 64 00 	lds	r24, 0x0064
 bc0:	88 23       	and	r24, r24
 bc2:	39 f4       	brne	.+14     	; 0xbd2 <Normal_Mode+0x4c>
		{
			Led_OFF(CAR_GREEN_LED);
 bc4:	80 e0       	ldi	r24, 0x00	; 0
 bc6:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Led_OFF>
			Led_OFF(CAR_RED_LED);
 bca:	82 e0       	ldi	r24, 0x02	; 2
 bcc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Led_OFF>
 bd0:	18 c0       	rjmp	.+48     	; 0xc02 <Normal_Mode+0x7c>
		}
		else if(current_car_led_state==RED && Current_Mode==NORMAL_MODE)
 bd2:	80 91 65 00 	lds	r24, 0x0065
 bd6:	82 30       	cpi	r24, 0x02	; 2
 bd8:	59 f4       	brne	.+22     	; 0xbf0 <Normal_Mode+0x6a>
 bda:	80 91 64 00 	lds	r24, 0x0064
 bde:	88 23       	and	r24, r24
 be0:	39 f4       	brne	.+14     	; 0xbf0 <Normal_Mode+0x6a>
		{
			Led_OFF(CAR_YELLOW_LED);
 be2:	81 e0       	ldi	r24, 0x01	; 1
 be4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Led_OFF>
			Led_ON(CAR_RED_LED);
 be8:	82 e0       	ldi	r24, 0x02	; 2
 bea:	0e 94 02 04 	call	0x804	; 0x804 <Led_ON>
 bee:	09 c0       	rjmp	.+18     	; 0xc02 <Normal_Mode+0x7c>
		}
		else
		{
			Led_OFF(CAR_GREEN_LED);
 bf0:	80 e0       	ldi	r24, 0x00	; 0
 bf2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Led_OFF>
			Led_OFF(CAR_YELLOW_LED);
 bf6:	81 e0       	ldi	r24, 0x01	; 1
 bf8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Led_OFF>
			Led_OFF(CAR_RED_LED);
 bfc:	82 e0       	ldi	r24, 0x02	; 2
 bfe:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Led_OFF>
}


void Normal_Mode(void)
{
	while(Current_Mode==NORMAL_MODE)
 c02:	80 91 64 00 	lds	r24, 0x0064
 c06:	88 23       	and	r24, r24
 c08:	19 f2       	breq	.-122    	; 0xb90 <Normal_Mode+0xa>
			Led_OFF(CAR_YELLOW_LED);
			Led_OFF(CAR_RED_LED);

		}
	}
}
 c0a:	cf 91       	pop	r28
 c0c:	df 91       	pop	r29
 c0e:	08 95       	ret

00000c10 <Pedestrian_Mode>:

void Pedestrian_Mode(void)
{
 c10:	df 93       	push	r29
 c12:	cf 93       	push	r28
 c14:	cd b7       	in	r28, 0x3d	; 61
 c16:	de b7       	in	r29, 0x3e	; 62
 c18:	19 c0       	rjmp	.+50     	; 0xc4c <Pedestrian_Mode+0x3c>
	while(Current_Mode==PEDESTRIANS_MODE)
	{
		if(current_car_led_state==RED)
 c1a:	80 91 65 00 	lds	r24, 0x0065
 c1e:	82 30       	cpi	r24, 0x02	; 2
 c20:	91 f4       	brne	.+36     	; 0xc46 <Pedestrian_Mode+0x36>
		{
			TIMER1_Stop();
 c22:	0e 94 6e 00 	call	0xdc	; 0xdc <TIMER1_Stop>
			TIMER1_Start(TIMER1_CS_1024_PRESCALER);
 c26:	85 e0       	ldi	r24, 0x05	; 5
 c28:	0e 94 5c 00 	call	0xb8	; 0xb8 <TIMER1_Start>
			Led_OFF(CAR_YELLOW_LED);
 c2c:	81 e0       	ldi	r24, 0x01	; 1
 c2e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Led_OFF>
			Led_OFF(CAR_GREEN_LED);
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Led_OFF>
			Led_ON(CAR_RED_LED);
 c38:	82 e0       	ldi	r24, 0x02	; 2
 c3a:	0e 94 02 04 	call	0x804	; 0x804 <Led_ON>
			Led_ON(PEDESTRIANS_GREEN_LED);
 c3e:	83 e0       	ldi	r24, 0x03	; 3
 c40:	0e 94 02 04 	call	0x804	; 0x804 <Led_ON>
 c44:	03 c0       	rjmp	.+6      	; 0xc4c <Pedestrian_Mode+0x3c>
		}
		else
		{
			Led_ON(PEDESTRIANS_RED_LED);
 c46:	85 e0       	ldi	r24, 0x05	; 5
 c48:	0e 94 02 04 	call	0x804	; 0x804 <Led_ON>
	}
}

void Pedestrian_Mode(void)
{
	while(Current_Mode==PEDESTRIANS_MODE)
 c4c:	80 91 64 00 	lds	r24, 0x0064
 c50:	81 30       	cpi	r24, 0x01	; 1
 c52:	19 f3       	breq	.-58     	; 0xc1a <Pedestrian_Mode+0xa>
		else
		{
			Led_ON(PEDESTRIANS_RED_LED);
		}
	}
}
 c54:	cf 91       	pop	r28
 c56:	df 91       	pop	r29
 c58:	08 95       	ret

00000c5a <App_Init>:


void App_Init(void)
{
 c5a:	df 93       	push	r29
 c5c:	cf 93       	push	r28
 c5e:	cd b7       	in	r28, 0x3d	; 61
 c60:	de b7       	in	r29, 0x3e	; 62
	Led_Init();
 c62:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Led_Init>
	TIMER1_Init();
 c66:	0e 94 49 00 	call	0x92	; 0x92 <TIMER1_Init>

	TIMER1_SetPreload(TIMER1_500ms_PRELOAD);
 c6a:	8a e7       	ldi	r24, 0x7A	; 122
 c6c:	91 ee       	ldi	r25, 0xE1	; 225
 c6e:	0e 94 7c 00 	call	0xf8	; 0xf8 <TIMER1_SetPreload>

	ExtInt_SnsCtrlSet(EXT_INT0,LOW_LEVEL_MODE);
 c72:	80 e0       	ldi	r24, 0x00	; 0
 c74:	60 e0       	ldi	r22, 0x00	; 0
 c76:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <ExtInt_SnsCtrlSet>
	ExtInt_Enable(EXT_INT0);
 c7a:	80 e0       	ldi	r24, 0x00	; 0
 c7c:	0e 94 c8 00 	call	0x190	; 0x190 <ExtInt_Enable>
	TIMER1_EnableInterrupt();
 c80:	0e 94 8e 00 	call	0x11c	; 0x11c <TIMER1_EnableInterrupt>
	EnableAllInterrupts();
 c84:	0e 94 aa 00 	call	0x154	; 0x154 <EnableAllInterrupts>
	Dio_ConfigChannel(DIO_PORTC,DIO_CHANNEL0,OUTPUT);
 c88:	82 e0       	ldi	r24, 0x02	; 2
 c8a:	60 e0       	ldi	r22, 0x00	; 0
 c8c:	41 e0       	ldi	r20, 0x01	; 1
 c8e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_CHANNEL3,OUTPUT);
 c92:	80 e0       	ldi	r24, 0x00	; 0
 c94:	63 e0       	ldi	r22, 0x03	; 3
 c96:	41 e0       	ldi	r20, 0x01	; 1
 c98:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Dio_ConfigChannel>
}
 c9c:	cf 91       	pop	r28
 c9e:	df 91       	pop	r29
 ca0:	08 95       	ret

00000ca2 <App_start>:

void App_start(void)
{
 ca2:	df 93       	push	r29
 ca4:	cf 93       	push	r28
 ca6:	cd b7       	in	r28, 0x3d	; 61
 ca8:	de b7       	in	r29, 0x3e	; 62
	Normal_Mode();
 caa:	0e 94 c3 05 	call	0xb86	; 0xb86 <Normal_Mode>
	Pedestrian_Mode();
 cae:	0e 94 08 06 	call	0xc10	; 0xc10 <Pedestrian_Mode>
}
 cb2:	cf 91       	pop	r28
 cb4:	df 91       	pop	r29
 cb6:	08 95       	ret

00000cb8 <main>:
//	EnableAllInterrupts();
//}


int main(void)
{
 cb8:	df 93       	push	r29
 cba:	cf 93       	push	r28
 cbc:	cd b7       	in	r28, 0x3d	; 61
 cbe:	de b7       	in	r29, 0x3e	; 62
		App_Init();
 cc0:	0e 94 2d 06 	call	0xc5a	; 0xc5a <App_Init>

		App_start();
 cc4:	0e 94 51 06 	call	0xca2	; 0xca2 <App_start>
 cc8:	ff cf       	rjmp	.-2      	; 0xcc8 <main+0x10>

00000cca <_exit>:
 cca:	f8 94       	cli

00000ccc <__stop_program>:
 ccc:	ff cf       	rjmp	.-2      	; 0xccc <__stop_program>
